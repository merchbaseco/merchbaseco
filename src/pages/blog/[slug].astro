---
import Layout from "@/layouts/layout.astro";
import { HugeiconsIcon } from "@merchbaseco/icons";
import { Home01Icon } from "@merchbaseco/icons/core-bulk-rounded";
import { getCollection, getEntry } from "astro:content";
import BlogFigureIsland from "@/components/blog/figure-island";
import { AnimatedSignature } from "@/components/blog/animated-signature";
import AuthorHighlight from "@/components/blog/author-highlight.astro";
import RecentPostsSection from "@/components/blog/recent-posts-section.astro";
import SiteFooter from "@/components/site-footer.astro";

export async function getStaticPaths() {
    const blogEntries = await getCollection("blog");

    return blogEntries.map((entry) => ({
        params: { slug: entry.slug },
    }));
}

const homeHref = new URL("/", Astro.url).pathname;

const slug = Astro.params.slug;

if (!slug) {
    return Astro.redirect(homeHref);
}

const entry = await getEntry("blog", slug);

if (!entry) {
    return Astro.redirect(homeHref);
}

const { Content, headings } = await entry.render();
const { data } = entry;
const heroFigure = data.heroFigure;

const componentFigureModules = import.meta.glob(
    "@/components/blog/figures/**/*.tsx",
);

const availableComponentFigures = new Set(
    Object.keys(componentFigureModules)
        .map((path) => {
            const normalizedPath = path.replace(/\\/g, "/");
            const baseName = normalizedPath
                .split("/")
                .pop()
                ?.replace(/\.(jsx|tsx|js|ts)$/, "");

            return baseName ?? "";
        })
        .filter((name) => name.length > 0),
);

const hasHeroComponent =
    heroFigure?.type === "component" &&
    availableComponentFigures.has(heroFigure.name);

const formattedDate = data.publishDate.toLocaleDateString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
});

const publishedDateTime = data.publishDate.toISOString();

const filteredHeadings = (headings ?? []).filter(
    (heading) => heading.depth <= 3,
);

const formatTagLabel = (tag: string) =>
    tag.replace(/-/g, " ").replace(/\b\w/g, (char) => char.toUpperCase());

const primaryTag = data.tags?.[0] ? formatTagLabel(data.tags[0]) : undefined;
---

<Layout title={`${data.title} Â· MerchBase`}>
    <main class="mx-auto w-full max-w-5xl pb-12">
        <header class="mt-12 pb-12 flex justify-between items-start">
            <div class="space-y-6">
                <h1 class="text-[44px] font-normal leading-6">
                    {data.title}
                </h1>
                <h2 class="text-xl uppercase text-gray-60">
                    Posted on
                    {formattedDate}
                </h2>
            </div>
            <a
                href={homeHref}
                class="group inline-flex items-center gap-2 rounded-2xl px-4 py-2 transition bg-gray-50 border border-gray-100 hover:bg-gray-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-900"
            >
                <HugeiconsIcon
                    icon={Home01Icon}
                    size={26}
                    color="currentColor"
                    className="transition-colors opacity-90"
                    aria-hidden="true"
                />
                <span>Back to Homepage</span>
            </a>
        </header>
        <figure class="overflow-hidden rounded-[28px] mb-12 w-[110%] -ml-[5%]">
            {
                heroFigure?.type === "image" ? (
                    <img
                        src={heroFigure.src}
                        alt={heroFigure.alt ?? data.title}
                        class="aspect-[16/9] h-auto w-full object-cover"
                        loading="lazy"
                    />
                ) : hasHeroComponent ? (
                    <div class="relative aspect-[16/9] w-full">
                        <BlogFigureIsland
                            client:load
                            name={heroFigure.name}
                            figureProps={heroFigure.props}
                            className="absolute inset-0 h-full w-full"
                        />
                    </div>
                ) : (
                    <div
                        aria-hidden="true"
                        class="aspect-[16/9] w-full bg-gradient-to-br from-blue-100 via-white to-orange-100"
                    />
                )
            }
        </figure>
        <article class="rich-text">
            <Content />
        </article>
        <div class="mt-16 h-[221px]">
            <AnimatedSignature client:only="react" />
        </div>
        <AuthorHighlight class="mt-12" />
        <SiteFooter class="pt-12" />
    </main>
</Layout>
